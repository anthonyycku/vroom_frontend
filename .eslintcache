[{"/Users/mahergeorgebrikae/project-4/vroom_frontend/src/Company.js":"1","/Users/mahergeorgebrikae/project-4/vroom_frontend/src/CreateCar.js":"2","/Users/mahergeorgebrikae/project-4/vroom_frontend/src/Main.js":"3","/Users/mahergeorgebrikae/project-4/vroom_frontend/src/Car.js":"4"},{"size":3509,"mtime":1612057899919,"results":"5","hashOfConfig":"6"},{"size":3012,"mtime":1612060481516,"results":"7","hashOfConfig":"6"},{"size":2097,"mtime":1612057605582,"results":"8","hashOfConfig":"6"},{"size":1406,"mtime":1612037605403,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12","usedDeprecatedRules":"13"},"1oa7fj7",{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/mahergeorgebrikae/project-4/vroom_frontend/src/Company.js",["20","21","22","23","24","25"],"import React from 'react';\nimport './styles/styles.css'\nimport axios from 'axios';\nimport Nav from './Nav'\nimport car from './Car'\nclass Company extends React.Component {\n    state = {\n        company: {},\n        children: [],\n        cars: [],\n    }\n\n    componentDidMount() {\n        setTimeout(() => {\n            this.getCompany()\n            this.getCars();\n        }, 50)\n    }\n    getCars = () => {\n        axios.get(\"https://vroomies.herokuapp.com/cars/\" + this.props.companyID).then(response => {\n            this.setState({\n                cars: response.data,\n            })\n        })\n    }\n    //GET SPECIFIC COMPANY\n    getCompany = () => {\n        axios.get(\"https://vroomies.herokuapp.com/companies/\" + this.props.companyID).then(response => {\n            let data = response.data;\n            let childrenArray = [];\n            let parentObject = {};\n            for (let key in data) {\n                if (typeof data[key] !== \"object\") {\n                    parentObject[key] = data[key];\n                }\n            }\n            if (data.children) {\n                childrenArray = data.children;\n            }\n            this.setState({\n                company: parentObject,\n                children: childrenArray\n            })\n        })\n    }\n\n    render() {\n        const { name, country, id, image, description } = this.state.company;\n        const { gotoPage, companyID } = this.props;\n        const { cars, children } = this.state\n\n\n        return (\n            <div className=\"ContainerCompany\">\n                <Nav gotoPage={gotoPage} />\n                <button className=\"myButton\" onClick={() => gotoPage(\"main\")}>Back</button>\n\n\n                <img className=\"companyImage\" src={image}></img>\n                <p className=\"companyName\">{name}</p>\n                <p className=\"companyCountry\">{country}</p>\n                <p className=\"companyDescription\">{description} description </p>\n\n                <button class=\"myButton\" onClick={() => gotoPage(\"editCompany\", id)}>Edit this company</button>\n\n\n                <button onClick={() => gotoPage(\"editCompany\", id)}>Edit this company</button>\n\n\n                <div>\n\n                    {children.length > 0 ?\n                        children.map(entry => {\n                            const { childName, childID, childImage } = entry\n                            return (\n                                <div>\n                                    <div onClick={() => gotoPage(\"company\", childID)}>\n                                        Name: {childName}\n                                    </div>\n                                </div>\n                            )\n                        })\n                        :\n                        null\n                    }\n\n                    {cars.map(car => {\n                        const { model, price, rating, type, image, company_id } = car\n                        return (\n                            <div>\n\n\n                                <p>Model: {model}</p>\n                                <p>Price: {price}</p>\n                                <p>Rating: {rating}</p>\n                                <p>Type: {type}</p>\n                                <p>_______________________</p>\n                                {/* <img className=\"childImage\" src={childImage}></img>{} */}\n\n                            </div>\n                        )\n                    })}\n                </div>\n            </div>\n        )\n\n    }\n}\n\nexport default Company;",["26","27"],"/Users/mahergeorgebrikae/project-4/vroom_frontend/src/CreateCar.js",[],"/Users/mahergeorgebrikae/project-4/vroom_frontend/src/Main.js",[],"/Users/mahergeorgebrikae/project-4/vroom_frontend/src/Car.js",["28"],{"ruleId":"29","severity":1,"message":"30","line":5,"column":8,"nodeType":"31","messageId":"32","endLine":5,"endColumn":11},{"ruleId":"29","severity":1,"message":"33","line":49,"column":27,"nodeType":"31","messageId":"32","endLine":49,"endColumn":36},{"ruleId":"34","severity":1,"message":"35","line":59,"column":17,"nodeType":"36","endLine":59,"endColumn":59},{"ruleId":"29","severity":1,"message":"37","line":74,"column":57,"nodeType":"31","messageId":"32","endLine":74,"endColumn":67},{"ruleId":"29","severity":1,"message":"38","line":88,"column":61,"nodeType":"31","messageId":"32","endLine":88,"endColumn":66},{"ruleId":"29","severity":1,"message":"39","line":88,"column":68,"nodeType":"31","messageId":"32","endLine":88,"endColumn":78},{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","replacedBy":"43"},{"ruleId":"29","severity":1,"message":"37","line":23,"column":57,"nodeType":"31","messageId":"32","endLine":23,"endColumn":67},"no-unused-vars","'car' is defined but never used.","Identifier","unusedVar","'companyID' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'childImage' is assigned a value but never used.","'image' is assigned a value but never used.","'company_id' is assigned a value but never used.","no-native-reassign",["44"],"no-negated-in-lhs",["45"],"no-global-assign","no-unsafe-negation"]