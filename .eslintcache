[{"/Users/anthonyku/Desktop/Project4/vroom_frontend/src/index.js":"1","/Users/anthonyku/Desktop/Project4/vroom_frontend/src/EditCompany.js":"2","/Users/anthonyku/Desktop/Project4/vroom_frontend/src/CreateCompany.js":"3","/Users/anthonyku/Desktop/Project4/vroom_frontend/src/EditCar.js":"4","/Users/anthonyku/Desktop/Project4/vroom_frontend/src/Company.js":"5","/Users/anthonyku/Desktop/Project4/vroom_frontend/src/Companies.js":"6","/Users/anthonyku/Desktop/Project4/vroom_frontend/src/CreateCar.js":"7"},{"size":272,"mtime":1611976727766,"results":"8","hashOfConfig":"9"},{"size":4760,"mtime":1612060783938,"results":"10","hashOfConfig":"9"},{"size":4468,"mtime":1612059322520,"results":"11","hashOfConfig":"9"},{"size":2336,"mtime":1612038691821,"results":"12","hashOfConfig":"9"},{"size":3667,"mtime":1612062242767,"results":"13","hashOfConfig":"9"},{"size":1778,"mtime":1612057615136,"results":"14","hashOfConfig":"9"},{"size":3070,"mtime":1612063011083,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"xikucl",{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"/Users/anthonyku/Desktop/Project4/vroom_frontend/src/index.js",[],["33","34"],"/Users/anthonyku/Desktop/Project4/vroom_frontend/src/EditCompany.js",["35"],"/Users/anthonyku/Desktop/Project4/vroom_frontend/src/CreateCompany.js",["36"],"import React from 'react';\nimport axios from 'axios';\nimport Main from './Main'\n\nclass CreateCompany extends React.Component {\n\n  state = {\n    name: '',\n    description: \"\",\n    country: '',\n    image: \"\",\n    parent_id: 0,\n    showParent: \"\"\n  }\n\n  handleChange = (event) => {\n    this.setState({\n      [event.target.id]: event.target.value,\n    })\n\n    if (event.target.id === \"showParent\") {\n      axios.get(\"https://vroomies.herokuapp.com/companies\").then(response => {\n        response.data.forEach(entry => {\n          if (entry.name.toLowerCase() === this.state.showParent.toLowerCase()) {\n            this.setState({\n              parent_id: entry.id\n            })\n          }\n        })\n        if (response.data.every(entry => entry.name.toLowerCase() !== this.state.showParent.toLowerCase())) {\n          this.setState({\n            parent_id: 0\n          })\n        }\n      })\n    }\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault()\n    let tempState = { ...this.state };\n    delete tempState.showParent;\n    axios.post(\"https://vroomies.herokuapp.com/companies\", tempState).then(response => {\n      this.setState({\n        name: \"\",\n        description: \"\",\n        image: \"\",\n        country: \"\",\n        parent_id: 0,\n        showParent: \"\"\n      })\n    })\n    this.props.gotoPage(\"main\");\n  }\n\n  render() {\n\n    return (\n      <div className=\"container-sm createPage\">\n        <button className=\"btn btn-warning\" onClick={() => this.props.gotoPage(\"main\")}>Back</button>\n        <h3>Create a Company</h3>\n\n        <form onSubmit={this.handleSubmit}>\n          {/* NAME  */}\n          <div className=\"row\">\n            <div className=\"col-sm-6\">\n              <label className=\"form-label\" htmlFor=\"name\">Company Name</label>\n              <input\n                className=\"form-control\"\n                autoComplete=\"off\"\n                type=\"text\"\n                id=\"name\"\n                onChange={this.handleChange}\n                value={this.state.name} />\n            </div>\n          </div>\n          <br />\n          {/* DESCRIPTION */}\n          <div className=\"row\">\n            <div className=\"col-sm-10\">\n              <label className=\"form-label\" htmlFor=\"description\">Description</label>\n              <textarea\n                className=\"form-control\"\n                autoComplete=\"off\"\n                type=\"text\"\n                id=\"description\"\n                onChange={this.handleChange}\n                value={this.state.description}>\n              </textarea>\n            </div>\n          </div>\n          <br />\n          {/* IMAGE */}\n          <div className=\"row\">\n            <div className=\"col-sm-6\">\n              <label className=\"form-label\" htmlFor=\"image\">Image</label>\n              <input\n                className=\"form-control\"\n                autoComplete=\"off\"\n                type=\"text\"\n                id=\"image\"\n                onChange={this.handleChange}\n                value={this.state.image} />\n            </div>\n          </div>\n          <br />\n          {/* COUNTRY */}\n          <div className=\"row\">\n            <div className=\"col-sm-6\">\n              <label className=\"form-label\" htmlFor=\"country\">Original country</label>\n              <input\n                className=\"form-control\"\n                autoComplete=\"off\"\n                type=\"text\"\n                id=\"country\"\n                onChange={this.handleChange}\n                value={this.state.country} />\n            </div>\n          </div>\n          <br />\n          {/* PARENT_ID */}\n          <div className=\"row\">\n            <div className=\"col-sm-6\">\n              <label className=\"form-label\" htmlFor=\"showParent\">Parent Company</label>\n              <input\n                className=\"form-control\"\n                autoComplete=\"off\"\n                type=\"text\"\n                id=\"showParent\"\n                onChange={this.handleChange}\n                value={this.state.showParent} />\n            </div>\n          </div>\n          {/* PARENT ID ALGORITHM */}\n          <div>\n            {this.state.parent_id !== 0 ?\n              <p style={{ color: \"limegreen\" }}>{this.state.showParent}'s ID is: {this.state.parent_id}</p>\n              :\n              null\n            }\n          </div>\n          <br />\n          <input\n            className=\"btn btn-success\"\n            type=\"submit\"\n            value=\"Create Company\" />\n        </form>\n\n      </div>\n    )\n  }\n\n}\n\nexport default CreateCompany;","/Users/anthonyku/Desktop/Project4/vroom_frontend/src/EditCar.js",[],"/Users/anthonyku/Desktop/Project4/vroom_frontend/src/Company.js",["37","38","39","40","41"],"import React from 'react';\nimport './styles/styles.css'\nimport axios from 'axios';\nimport Nav from './Nav'\nimport car from './Car'\nclass Company extends React.Component {\n    state = {\n        company: {},\n        children: [],\n        cars: []\n    }\n    componentDidMount = () => {\n        setTimeout(() => {\n            this.getCompany()\n            this.getCars();\n        }, 250)\n    }\n    getCars = () => {\n        axios.get(\"https://vroomies.herokuapp.com/cars/\" + this.props.companyID).then(response => {\n            this.setState({\n                cars: response.data\n            })\n        })\n    }\n    //GET SPECIFIC COMPANY\n    getCompany = () => {\n        axios.get(\"https://vroomies.herokuapp.com/companies/\" + this.props.companyID).then(response => {\n            let data = response.data;\n            let childrenArray = [];\n            let parentObject = {};\n            for (let key in data) {\n                if (typeof data[key] !== \"object\") {\n                    parentObject[key] = data[key];\n                }\n            }\n            if (data.children) {\n                childrenArray = data.children;\n            }\n            this.setState({\n                company: parentObject,\n                children: childrenArray\n            })\n        })\n    }\n\n    render() {\n        const { name, country, id, image, description } = this.state.company;\n        const { gotoPage, companyID } = this.props;\n        const { cars, children } = this.state\n\n        return (\n            <div className=\"ContainerCompany\">\n                <Nav gotoPage={gotoPage} />\n                <button className=\"myButton\" onClick={() => gotoPage(\"main\")}>Back</button>\n                <button className=\"btn btn-warning\" onClick={() => gotoPage(\"editCompany\", companyID)}>Edit Company</button>\n\n                <img className=\"companyImage\" src={image}></img>\n                <p className=\"companyName\">{name}</p>\n                <p className=\"companyCountry\">{country}</p>\n                <p className=\"companyDescription\">{description} description </p>\n\n                <button className=\"myButton\" onClick={() => gotoPage(\"editCompany\", id)}>Edit this company</button>\n\n\n                <button onClick={() => gotoPage(\"editCompany\", id)}>Edit this company</button>\n\n\n                <div>\n\n                    {children.length > 0 ?\n                        children.map(entry => {\n                            const { childName, childID, childImage } = entry\n                            return (\n                                <div key={childID}>\n                                    <div onClick={() => gotoPage(\"company\", childID)}>\n                                        Name: {childName}\n                                    </div>\n                                </div>\n                            )\n                        })\n                        :\n                        null\n                    }\n\n                    {cars.map(car => {\n                        const { id, model, price, rating, type, image, company_id } = car\n                        return (\n                            <div key={id}>\n\n\n                                <p>Model: {model}</p>\n                                <p>Price: {price}</p>\n                                <p>Rating: {rating}</p>\n                                <p>Type: {type}</p>\n                                <p>_______________________</p>\n                                {/* <img className=\"childImage\" src={childImage}></img>{} */}\n\n                            </div>\n                        )\n                    })}\n                </div>\n            </div>\n        )\n    }\n}\n\n\nexport default Company;","/Users/anthonyku/Desktop/Project4/vroom_frontend/src/Companies.js",["42"],"/Users/anthonyku/Desktop/Project4/vroom_frontend/src/CreateCar.js",[],{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","severity":1,"message":"48","line":68,"column":48,"nodeType":"49","messageId":"50","endLine":68,"endColumn":57},{"ruleId":"47","severity":1,"message":"51","line":3,"column":8,"nodeType":"49","messageId":"50","endLine":3,"endColumn":12},{"ruleId":"47","severity":1,"message":"52","line":5,"column":8,"nodeType":"49","messageId":"50","endLine":5,"endColumn":11},{"ruleId":"53","severity":1,"message":"54","line":57,"column":17,"nodeType":"55","endLine":57,"endColumn":59},{"ruleId":"47","severity":1,"message":"56","line":72,"column":57,"nodeType":"49","messageId":"50","endLine":72,"endColumn":67},{"ruleId":"47","severity":1,"message":"57","line":86,"column":65,"nodeType":"49","messageId":"50","endLine":86,"endColumn":70},{"ruleId":"47","severity":1,"message":"58","line":86,"column":72,"nodeType":"49","messageId":"50","endLine":86,"endColumn":82},{"ruleId":"53","severity":1,"message":"54","line":41,"column":41,"nodeType":"55","endLine":41,"endColumn":90},"no-native-reassign",["59"],"no-negated-in-lhs",["60"],"no-unused-vars","'parent_id' is assigned a value but never used.","Identifier","unusedVar","'Main' is defined but never used.","'car' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'childImage' is assigned a value but never used.","'image' is assigned a value but never used.","'company_id' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]