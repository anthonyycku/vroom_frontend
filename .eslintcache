[{"/Users/andrettiduvenhage/Documents/GitHub/Project4/vroom_frontend/src/CreateCar.js":"1","/Users/andrettiduvenhage/Documents/GitHub/Project4/vroom_frontend/src/Company.js":"2","/Users/andrettiduvenhage/Documents/GitHub/Project4/vroom_frontend/src/Main.js":"3","/Users/andrettiduvenhage/Documents/GitHub/Project4/vroom_frontend/src/Nav.js":"4"},{"size":2150,"mtime":1612040059471,"results":"5","hashOfConfig":"6"},{"size":3335,"mtime":1612042941187,"results":"7","hashOfConfig":"6"},{"size":2988,"mtime":1612040059471,"results":"8","hashOfConfig":"6"},{"size":531,"mtime":1612030077960,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"npjvor",{"filePath":"12","messages":"13","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/andrettiduvenhage/Documents/GitHub/Project4/vroom_frontend/src/CreateCar.js",[],"/Users/andrettiduvenhage/Documents/GitHub/Project4/vroom_frontend/src/Company.js",["19","20","21","22"],"import React from 'react';\nimport './styles/styles.css'\nimport axios from 'axios';\nimport Nav from './Nav'\nclass Company extends React.Component {\n    state = {\n        cars: [],\n        isLoaded: false\n    }\n    // componentDidUpdate = (prevProps) => {\n    //     if (this.props.company !== prevProps.company) {\n    //         this.getCars();\n    //     }\n    // }\n    componentDidMount() {\n        setTimeout(() => {\n            this.getCars();\n        }, 500)\n    }\n    getCars = () => {\n        axios.get(\"https://vroomies.herokuapp.com/cars/\" + this.props.company.id).then(response => {\n            this.setState({\n                cars: response.data,\n                isLoaded: true\n            })\n        })\n    }\n\n    render() {\n        const { name, country, id, image, description } = this.props.company;\n        const { gotoPage, children } = this.props;\n        const { cars } = this.state\n        if (this.state.isLoaded === true) {\n            return (\n            <div className=\"ContainerCompany\">\n                <Nav gotoPage={gotoPage} />\n                <button class=\"myButton\" onClick={() => gotoPage(\"main\")}>Back</button>\n                \n                <img className=\"companyImage\" src={image}></img>\n                <p className=\"companyName\">{name}</p>\n                <p className=\"companyCountry\">{country}</p>\n                <p className=\"companyDescription\">{description} description </p>\n                \n                <button class=\"myButton\" onClick={() => gotoPage(\"editCompany\", id)}>Edit this company</button>\n\n\n                    <button onClick={() => gotoPage(\"editCompany\", id)}>Edit this company</button>\n            \n                    {/* <button onClick={() => gotoPage(\"createCar\")}>Create</button> */}\n\n                    <div>\n\n                        {children.length > 0 ?\n                            children.map(entry => {\n                                const { childName, childID, childImage } = entry\n                                return (\n                                    <div>\n                                        <div onClick={() => gotoPage(\"company\", childID)}>\n                                            Name: {childName}\n                                            <img className=\"childImage\" src={childImage}></img>{}\n                                        </div>\n                                    </div>\n                                )\n                            })\n                            :\n                            null\n                        }\n\n                        {cars.map(car => {\n                            const { model, price, rating, type, image, company_id } = car\n                            return (\n                                <div>\n                                    <p>Model: {model}</p>\n                                    <p>Price: {price}</p>\n                                    <p>Rating: {rating}</p>\n                                    <p>Type: {type}</p>\n                                    <p>_______________________</p>\n                                    \n\n                                </div>\n                            )\n                        })}\n                    </div>\n                </div>\n            )\n        } else {\n            return null;\n     }\n     \n    }\n}\n\nexport default Company;","/Users/andrettiduvenhage/Documents/GitHub/Project4/vroom_frontend/src/Main.js",[],"/Users/andrettiduvenhage/Documents/GitHub/Project4/vroom_frontend/src/Nav.js",["23"],{"ruleId":"24","severity":1,"message":"25","line":39,"column":17,"nodeType":"26","endLine":39,"endColumn":59},{"ruleId":"24","severity":1,"message":"25","line":60,"column":45,"nodeType":"26","endLine":60,"endColumn":90},{"ruleId":"27","severity":1,"message":"28","line":70,"column":65,"nodeType":"29","messageId":"30","endLine":70,"endColumn":70},{"ruleId":"27","severity":1,"message":"31","line":70,"column":72,"nodeType":"29","messageId":"30","endLine":70,"endColumn":82},{"ruleId":"32","severity":1,"message":"33","line":11,"column":25,"nodeType":"26","endLine":11,"endColumn":86},"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-unused-vars","'image' is assigned a value but never used.","Identifier","unusedVar","'company_id' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md"]